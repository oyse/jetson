/*
 * generated by Xtext
 */
package org.dadacoalition.ui.outline;

import java.util.ArrayList;
import java.util.List;

import org.dadacoalition.json.JSONArray;
import org.dadacoalition.json.JSONBoolean;
import org.dadacoalition.json.JSONNull;
import org.dadacoalition.json.JSONNumber;
import org.dadacoalition.json.JSONObject;
import org.dadacoalition.json.JSONPair;
import org.dadacoalition.json.JSONString;
import org.dadacoalition.json.JSONValue;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.ui.editor.outline.ContentOutlineNode;
import org.eclipse.xtext.ui.editor.outline.transformer.AbstractDeclarativeSemanticModelTransformer;

/**
 * customization of the default outline structure
 *
 */
public class JsonTransformer extends AbstractDeclarativeSemanticModelTransformer {

//    /**
//     * This method will be called by naming convention: - method name must be
//     * createNode - first param: subclass of EObject - second param:
//     * ContentOutlineNode
//     */
//    public ContentOutlineNode createNode(JSONString jsonString, ContentOutlineNode parentNode) {
//        System.out.println("Create node " + jsonString);
//        ContentOutlineNode node = super.newOutlineNode(jsonString, parentNode);
//        node.setLabel("special " + node.getLabel());
//        return node;
//    }
//
//    public ContentOutlineNode createNode(JSONPair jsonPair, ContentOutlineNode parentNode) {
//        ContentOutlineNode node = super.newOutlineNode(jsonPair, parentNode);
//
//        System.out.println("Create node " + jsonPair);
//        if (this.hasComplexValue(jsonPair)) {
//            node.setLabel(node.getLabel());
//        } else {
//            EObject value = ((JSONValue) jsonPair.getValue()).getValue();
//            String valueLabel = "";
//            if (value instanceof JSONString) {
//                JSONString js = (JSONString) value;
//                valueLabel = js.getValue();
//            } else if (value instanceof JSONNumber) {
//                JSONNumber jn = (JSONNumber) value;
//                valueLabel = jn.getValue();
//            } else if (value instanceof JSONBoolean) {
//                JSONBoolean jb = (JSONBoolean) value;
//                valueLabel = jb.getValue();
//            } else if (value instanceof JSONNull) {
//                JSONNull jn = (JSONNull) value;
//                valueLabel = jn.getValue();
//            }
//
//            node.setLabel(node.getLabel() + " : " + valueLabel);
//        }
//        return node;
//    }
//
//    public ContentOutlineNode createNode(JSONArray jsonArray, ContentOutlineNode parentNode){
//        System.out.println("Create node " + jsonArray);
//        ContentOutlineNode node = super.newOutlineNode(jsonArray, parentNode);
//        node.setLabel(node.getLabel());
//        return node;
//    }
//
//    public ContentOutlineNode createNode(JSONObject jsonObject, ContentOutlineNode parentNode){
//        System.out.println("Create node " + jsonObject);
//        ContentOutlineNode node = super.newOutlineNode(jsonObject, parentNode);
//        node.setLabel(node.getLabel());
//        return node;
//    }
//
//    public ContentOutlineNode createNode(JSONValue jsonValue, ContentOutlineNode parentNode){
//        System.out.println("Create node " + jsonValue);
//        return createNode(jsonValue, parentNode);
//    }
//
//    public ContentOutlineNode createNode(JSONBoolean jsonValue, ContentOutlineNode parentNode){
//        System.out.println("Create node " + jsonValue);
//        return createNode(jsonValue, parentNode);
//    }
//
//    public ContentOutlineNode createNode(JSONNull jsonValue, ContentOutlineNode parentNode){
//        System.out.println("Create node " + jsonValue);
//        return createNode(jsonValue, parentNode);
//    }
//
//    public ContentOutlineNode createNode(JSONNumber jsonValue, ContentOutlineNode parentNode){
//        System.out.println("Create node " + jsonValue);
//        return createNode(jsonValue, parentNode);
//    }
//    // public ContentOutlineNode createNode(
//    // Property semanticNode, ContentOutlineNode parentNode) {
//    // ContentOutlineNode node = super.newOutlineNode(semanticNode, parentNode);
//    // node.setLabel("pimped " + node.getLabel());
//    // return node;
//    // }
//
//    /**
//     * This method will be called by naming convention: - method name must be
//     * getChildren - first param: subclass of EObject
//     */
//    // public List<EObject> getChildren(JSONString attribute) {
//    // return attribute.eContents();
//    // }
//
//    public List<EObject> getChildren(JSONString jsonString) {
//        System.out.println("JsonString");
//        return NO_CHILDREN;
//    }
//
//    public List<EObject> getChildren(JSONPair jsonPair) {
//        System.out.println("JsonPair");
//        if (this.hasComplexValue(jsonPair)) {
//            EObject value = jsonPair.getValue().getValue();
//            List<EObject> l = new ArrayList<EObject>();
//            l.add(value);
//            return l;
//        }
//
//        return NO_CHILDREN;
//
//    }
//
//    public List<EObject> getChildren(JSONArray jsonArray) {
//        System.out.println("JsonArray Children");
//        List<EObject> children = jsonArray.eContents();
//        System.out.println("Num children: " + children.size() );
//        return children;
////        EList<JSONValue> values = jsonArray.getValues();
////        List<EObject> eobj_values = new ArrayList<EObject>();
////        for (JSONValue v : values) {
////            System.out.println(v);
////            eobj_values.add(v);
////        }
////        return eobj_values;
//    }
//
//    public List<EObject> getChildren(JSONValue jsonValue) {
//        System.out.println("JsonValue Children");
//        return jsonValue.eContents();
////        EObject value = jsonValue.getValue();
////        System.out.println("JsonValue " + value);
////        if( value instanceof JSONArray ){
////            return getChildren((JSONArray) value);
////        } else if( value instanceof JSONObject ){
////            return getChildren((JSONObject) value);
////        } else {
////            //none of the others have any children
////            System.out.println("Has no children: " + value);
////            return NO_CHILDREN;
////        }
//    }
//
//    public List<EObject> getChildren(JSONObject jsonObject) {
//        System.out.println("JsonObject Children");
//        return jsonObject.eContents();
////        EList<JSONPair> pairs = jsonObject.getPairs();
////        List<EObject> eobj_pairs = new ArrayList<EObject>();
////        for (JSONPair pair : pairs) {
////            eobj_pairs.add(pair);
////        }
////
////        return eobj_pairs;
//    }
//
//    protected boolean hasComplexValue(JSONPair jsonPair) {
//
//        EObject value = jsonPair.getValue().getValue();
//
//        if (value instanceof JSONArray || value instanceof JSONObject) {
//            return true;
//        }
//
//        return false;
//
//    }

}
